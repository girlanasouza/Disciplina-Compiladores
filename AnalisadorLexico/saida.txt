LINHA     TOKEN               LEXEMA

1         KW_INT              int
1         TK_IDENTIFIER       adicao
1         40                  (
1         KW_INT              int
1         TK_IDENTIFIER       a
1         44                  ,
1         KW_INT              int
1         TK_IDENTIFIER       b
1         41                  )
1         123                 {
2         KW_RETURN           return
2         TK_IDENTIFIER       a
2         43                  +
2         TK_IDENTIFIER       b
2         SG_SEMICOLON        ;
3         125                 }
5         KW_INT              int
5         TK_IDENTIFIER       subtracao
5         40                  (
5         KW_INT              int
5         TK_IDENTIFIER       a
5         44                  ,
5         KW_INT              int
5         TK_IDENTIFIER       b
5         41                  )
5         123                 {
6         KW_RETURN           return
6         TK_IDENTIFIER       a
6         45                  -
6         TK_IDENTIFIER       b
6         SG_SEMICOLON        ;
7         125                 }
9         TK_IDENTIFIER       long
9         TK_IDENTIFIER       long
9         KW_INT              int
9         TK_IDENTIFIER       multiplicacao
9         40                  (
9         KW_INT              int
9         TK_IDENTIFIER       a
9         44                  ,
9         KW_INT              int
9         TK_IDENTIFIER       b
9         41                  )
9         123                 {
10        KW_RETURN           return
10        TK_IDENTIFIER       a
10        42                  *
10        TK_IDENTIFIER       b
10        SG_SEMICOLON        ;
11        125                 }
14        KW_REAL             real
14        TK_IDENTIFIER       divisao
14        40                  (
14        KW_INT              int
14        TK_IDENTIFIER       a
14        44                  ,
14        KW_INT              int
14        TK_IDENTIFIER       b
14        41                  )
14        123                 {
15        KW_RETURN           return
15        TK_IDENTIFIER       a
15        47                  /
15        TK_IDENTIFIER       b
15        SG_SEMICOLON        ;
16        125                 }
19        KW_REAL             real
19        TK_IDENTIFIER       escolheOperacao
19        40                  (
19        TK_IDENTIFIER       unsigned
19        TK_IDENTIFIER       x
19        44                  ,
19        KW_INT              int
19        TK_IDENTIFIER       nA
19        44                  ,
19        KW_INT              int
19        TK_IDENTIFIER       nB
19        41                  )
19        123                 {
22        KW_REAL             real
22        TK_IDENTIFIER       resultado
22        SG_SEMICOLON        ;
24        TK_IDENTIFIER       switch
24        40                  (
24        TK_IDENTIFIER       x
24        41                  )
24        123                 {
25        TK_IDENTIFIER       case
25        LIT_INT             1
25        OPERATOR_ATRIB      =
25        TK_IDENTIFIER       resultado
25        OPERATOR_ATRIB      =
25        TK_IDENTIFIER       adicao
25        40                  (
25        TK_IDENTIFIER       nA
25        44                  ,
25        TK_IDENTIFIER       nB
25        41                  )
25        SG_SEMICOLON        ;
25        TK_IDENTIFIER       break
25        SG_SEMICOLON        ;
26        TK_IDENTIFIER       case
26        LIT_INT             2
26        OPERATOR_ATRIB      =
26        TK_IDENTIFIER       resultado
26        OPERATOR_ATRIB      =
26        TK_IDENTIFIER       subtracao
26        40                  (
26        TK_IDENTIFIER       nA
26        44                  ,
26        TK_IDENTIFIER       nB
26        41                  )
26        SG_SEMICOLON        ;
26        TK_IDENTIFIER       break
26        SG_SEMICOLON        ;
27        TK_IDENTIFIER       case
27        LIT_INT             3
27        OPERATOR_ATRIB      =
27        TK_IDENTIFIER       resultado
27        OPERATOR_ATRIB      =
27        TK_IDENTIFIER       multiplicacao
27        40                  (
27        TK_IDENTIFIER       nA
27        44                  ,
27        TK_IDENTIFIER       nB
27        41                  )
27        SG_SEMICOLON        ;
27        TK_IDENTIFIER       break
27        SG_SEMICOLON        ;
28        TK_IDENTIFIER       case
28        LIT_INT             4
28        OPERATOR_ATRIB      =
28        TK_IDENTIFIER       resultado
28        OPERATOR_ATRIB      =
28        TK_IDENTIFIER       divisao
28        40                  (
28        TK_IDENTIFIER       nA
28        44                  ,
28        TK_IDENTIFIER       nB
28        41                  )
28        SG_SEMICOLON        ;
28        TK_IDENTIFIER       break
28        SG_SEMICOLON        ;
29        TK_IDENTIFIER       default
29        OPERATOR_ATRIB      =
29        TK_IDENTIFIER       resultado
29        OPERATOR_ATRIB      =
29        LIT_INT             0
29        SG_SEMICOLON        ;
29        TK_IDENTIFIER       break
29        SG_SEMICOLON        ;
30        125                 }
31        KW_RETURN           return
31        TK_IDENTIFIER       resultado
31        SG_SEMICOLON        ;
32        125                 }
39        KW_INT              int
39        TK_IDENTIFIER       main
39        40                  (
39        41                  )
39        123                 {
41        TK_IDENTIFIER       unsigned
41        TK_IDENTIFIER       operacao
41        SG_SEMICOLON        ;
42        KW_INT              int
42        TK_IDENTIFIER       numUM
42        44                  ,
42        TK_IDENTIFIER       numDOIS
42        SG_SEMICOLON        ;
44        KW_CHAR             char
44        TK_IDENTIFIER       ch
44        OPERATOR_ATRIB      =
44        LIT_CHAR            'p'
44        SG_SEMICOLON        ;
45        KW_REAL             real
45        TK_IDENTIFIER       value
45        OPERATOR_ATRIB      =
45        LIT_REAL            23.75
45        SG_SEMICOLON        ;
47        TK_IDENTIFIER       printf
47        40                  (
47        LIT_STRING          "Escolha a Operacao Aritmetica que deseja realizar.\n"
47        41                  )
47        SG_SEMICOLON        ;
48        TK_IDENTIFIER       printf
48        40                  (
48        LIT_STRING          "Digite (1) para Adicao; (2) para Subtracao; (3) para Multiplicacao; ou (4) para Divisao: "
48        41                  )
48        SG_SEMICOLON        ;
49        TK_IDENTIFIER       scanf
49        40                  (
49        LIT_STRING          "%u"
49        44                  ,
49        TK_IDENTIFIER       operacao
49        41                  )
49        SG_SEMICOLON        ;
50        TK_IDENTIFIER       printf
50        40                  (
50        LIT_STRING          "Informe um numero inteiro como primeiro operando: "
50        41                  )
50        SG_SEMICOLON        ;
51        TK_IDENTIFIER       scanf
51        40                  (
51        LIT_STRING          "%d"
51        44                  ,
51        TK_IDENTIFIER       numUM
51        41                  )
51        SG_SEMICOLON        ;
52        TK_IDENTIFIER       printf
52        40                  (
52        LIT_STRING          "Informe um outro numero inteiro como segundo operando: "
52        41                  )
52        SG_SEMICOLON        ;
53        TK_IDENTIFIER       scanf
53        40                  (
53        LIT_STRING          "%d"
53        44                  ,
53        TK_IDENTIFIER       numDOIS
53        41                  )
53        SG_SEMICOLON        ;
55        TK_IDENTIFIER       printf
55        40                  (
55        LIT_STRING          "O resultado da operacao %u entre os operandos %d e %d eh: %.2f"
55        44                  ,
55        TK_IDENTIFIER       operacao
55        44                  ,
55        TK_IDENTIFIER       numUM
55        44                  ,
55        TK_IDENTIFIER       numDOIS
55        44                  ,
55        TK_IDENTIFIER       escolheOperacao
55        40                  (
55        TK_IDENTIFIER       operacao
55        44                  ,
55        TK_IDENTIFIER       numUM
55        44                  ,
55        TK_IDENTIFIER       numDOIS
55        41                  )
55        41                  )
55        SG_SEMICOLON        ;
57        KW_LOOP             loop
57        40                  (
57        KW_IF               if
57        TK_IDENTIFIER       resultado
57        OPERATOR_EQ         ==
57        LIT_REAL            34.5
57        41                  )
57        123                 {
58        KW_OUTPUT           output
58        40                  (
58        LIT_STRING          "OK"
58        41                  )
58        SG_SEMICOLON        ;
60        125                 }
61        125                 }
62        KW_OUTPUT           output
62        40                  (
62        LIT_STRING          "kdfsjljfdsf"
62        41                  )
62        SG_SEMICOLON        ;
62        47                  /
62        47                  /
63        TK_IDENTIFIER       skfjkdsjsd
63        KW_RETURN           return
63        LIT_INT             0
63        SG_SEMICOLON        ;
